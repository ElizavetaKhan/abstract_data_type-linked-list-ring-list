private:
    Item* head;

private:
        // объединяет множества – возвращает новую голову
        Item* combiner(Item* A, Item* B);
            // храним текущий элемент
            Item* i = A; Item* j = B;
            // заполняем первый элемент отдельно – у кого head меньше

            while (j && i)
            {
                // при совпадении itemов - добавляем
                    // создаем элемент и вставляем после cur
                    // i.next j.next

                // i > j – добавляем после cur
                    // создаем элемент и вставляем после cur
                    // j.next

                // i < j – добавляем после cur
                    // создаем элемент и вставляем после cur
                    // i.next
            }

            // если закончилось одно из множеств – добавляем элементы другого до конца в С через copy()
                // возвращает новую голову, ее присоединяем после cur
            // возвращаем новую голову


        // объединяет непересекающиеся множества
        static Item* merger(Item* A, Item* B);
            // храним текущий элемент
            Item* i = A; Item* j = B;
            // заполняем первый элемент отдельно – у кого head меньше

            while (j && i)
            {
                // i > j – добавляем после cur
                    // создаем элемент и вставляем после cur
                    // j.next

                // i < j – добавляем после cur
                    // создаем элемент и вставляем после cur
                    // i.next
            }

            // если закончилось одно из множеств – добавляем элементы другого до конца в С через copy()
                // возвращает новую голову, ее присоединяем после cur
            // возвращаем новую голову



        // перечение множеств – возвращает новую голову
        Item* crosser(Item* A, Item* B);
            // храним текущий элемент
            Item* i = A; Item* j = B;
            // заполняем первый элемент отдельно
                // пока !head – идем по спискам
                    // при совпадении itemов - head добавляем
                    // если в списке A элемент меньше – i.next
                    // если в списке B элемент меньше – j.next

            // если конец любого из списков
            while (j && i)
            {
                // при совпадении itemов - добавляем
                     // создаем элемент и вставляем после cur
                     // i.next j.next

                // если в списке A элемент меньше
                     // i.next

                // идем дальше по списку В
                     // j->next;
            }
            // возвращает новую голову


        // разность – возвращает новую голову
        Item* subtractor(Item* A, Item* B);
            // храним предыдущий элемент
            Item* i = A; Item* j = B;

            while (j && i)
            {
                 // при совпадении itemов - удаляем
                       // j->next;
                       // если голову надо удалить
                       // иначе просто удаляем i

                 // если в текущем списке элемент меньше - делаем next
                 // если в текущем списке элемент больше – идем дальше по списку В
            }
            // возвращает новую голову


        // равны ли множества
        bool equals(Item* A, Item* B);
            // идем по двум спискам одновременно до конца
            // если несовпадение – возвращаем false
            // иначе в самом конце возвращаем true (если и в i, и в j дошли до конца)


        // ищем от головы х, возвращаем всегда предыдущий
        Item* findX(int x);
            // двигаемся по списку пока не дошли до nullptr, храним prev
                 // если совпало или уже перепрыгнуло имеющееся значение – возвращаем prev
            // если ничего не нашли – возвращаем prev (хвост)


        // копирующий конструктор либо всего списка, либо его части(присоединение к хвосту)
        // возвращает голову скопируемой части
        Item* copy(Item* copy);
            // идет от copy до nullptr
            // создает новый элемент и присоединяет к prev
            // возвращаем голову этого всего

        void destructor();

public:
    // конструктор по умолчанию (пустое множество)
    list_set();

    ~list_set();

    // UNION новое множество возвращает и записывается в С
    list_set& operator+(list_set& B);
        // если this == B – возвращаем this;
        // если !this и В – возвращаем В
        // если !В и this – возвращаем this
        // если оба пустые – возвращаем пустое множество
        // создаем С и отправляем в закрытый метод combiner(this->head, B.head)
        // возвращаем С


    // INTERSECTION пересечение множеств this и В
    list_set& operator^(list_set& B);
        // если this == B – возвращаем this;
        // если !this или !В – возвращаем пустое множество
        // создаем С и отправляем в закрытый метод crosser(this->head, B.head)
        // возвращаем С


    // DIFFERENCE разность множеств this и В
    list_set& operator/(list_set& B);
        // если !this ИЛИ this == B – возвращаем пустое множество
        // если !В – возвращаем this
        // создаем С, и получаем из copy(this) голову из копирующего конструктора
        // из закрытого метода subtractor получаем новую голову
        // возвращаем С


    // слияние множеств А и В, результат в С. На непересекающихся множествах!!!!
    list_set& merge(list_set& B);
        // если !this и В – возвращаем В
        // если !В и this – возвращаем this
        // если оба пустые – возвращаем пустое множество
        // отправляем в закрытый метод merger() и возвращается новая голова


    // true - х принадлежит А, false - не принадлежит
    bool member(int x);
        // проверка на наличие множества
        // в методе findX ищем х в списке – возвращается оттуда предыдущий
        // если вернулся prev.next == x – возвращаем true


    // вставить в множество значение
    void insert(int v);
        // создаем item с val = х
        // если голова пустая – вставка в пустое множество - создается head - первый и последний элемент

        // если х < head.val то вставка в голову
        // поиск значения х в findX – получаем предыдущий элемент
        // вернули prev элемента neW.val - если prev.next это не х - то надо добавить
        // иначе если temp - последний элемент присоединяем в хвост

    // из множества А удаляется значение х, если оно там есть, иначе ничего не делаем
    void deleTe(int x);
        // проверяем наличие множества
        // prev – храним предыдущий элемент

        // двигаемся по списку от головы до х
        {
            // ЕСЛИ НАШЛИ СОВПАДЕНИЕ
                // если голова
                    // если есть еще элементы помимо головы – двигаем голову вперед и удаляем старую
                    // если один элемент в списке – удаляем и делаем голову nullptr
            // иначе "вырезаем" элемент i из списка
        }


    // ASSIGN присваивание А мн-ва В. В не меняется
    list_set& operator= (list_set B);
        // если this == B – возвращаем this
        // удаляем текущий список в деструкторе
        // через копирующий конструктор присваиваем В.head


    // минимальный элемент списка - head
    int min();
        // если есть голова, то возвращаем ее значение
        // иначе минимум для int


    // последний элемент списка
    int max();
        // если есть голова, то
            // идем циклом до конца, храним prev
            // возвращаем потом prev


    //  EQUAL true, если множества A и B эквивалентны. false, если множества A и B  не эквивалентны.
    bool operator==(list_set& B);
        // если this == B – возвращаем true
        // если не this или не В – возврат false

        // возвращаем equals(this.head,B.head);


    // доп. метод - проверяет пересекаются множества или нет.
    bool isIntersect(const list_set& B);
        // если this == B – возвращаем true;
        // идем по двум спискам одновременно, пока не кончатся
        // если равны элементы – возвращаем true
        // если i > j – в j делаем next
        // если i < j – в i делаем next
        // если вышли из цикла – возвращаем false


    // возвращает то множество, в котором обнаружен объект х. Если не найден, то возвращаем пустое множество - NULLPTR (ни А, ни В).
    list_set& find(list_set& B, int x);
        // проверка на наличие множеств – если нет А и есть В - проверка в В (и наоборот)
        // через findX ищем элемент в списках
        // если нигде нет – в консоль пишем об этом