private:
    item* tail;

private:

    // объединяет множества – возвращает новый хвост
    item* combiner(item* A, item* B);
        item* i = A.next; item* j = B.next;
        // заполняем первый элемент отдельно – у кого head меньше

        while (i != A && j != B)
        {
            // при совпадении itemов - добавляем элемент
                // создаем элемент и вставляем в хвост
                // j->next и i->next

            // если i больше - создаем элемент и добавляем после cur
                // создаем элемент и вставляем в хвост
                // j->next

            // если j больше - создаем элемент и добавляем после cur
                // создаем элемент и вставляем в хвост
        }
        // отдельно обрабатываем хвост – списком(который не закончился) догоняем другой
            // пока не закончился список А(В уже закончился)
                    // при совпадении добавляем и выходим из цикла
                    // если i > j (и j == B) – выходим, иначе добавляем
                    // если j > i (и i == A) – выхлдим, иначе добавляем

        // если закончилось одно из множеств – отправляемся в copy и возвращаем хвост списка с остаточной частью
            // теперь наш хвост.next = новый хвост.next
            // также переназначаем сам хвост
        // возвращает новый хвост


    // объединение непересекающихся множеств
    static item* merger(item* A, item* B);
        item* i = A.next; item* j = B.next;
        // заполняем первый элемент отдельно – у кого head меньше

        while (i != A && j != B)
        {
            // если i больше - создаем элемент и добавляем после cur
                // создаем элемент и вставляем в хвост
                // j->next

            // если j больше - создаем элемент и добавляем после cur
                // создаем элемент и вставляем в хвост
        }
        // отдельно обрабатываем хвост – списком(который не закончился) догоняем другой
            // пока не закончился список А(В уже закончился)
                    // если i > j (и j == B) – выходим, иначе добавляем
                    // если j > i (и i == A) – выходим, иначе добавляем
        // если закончилось одно из множеств – отправляемся в copy и возвращаем хвост списка с остаточной частью
            // теперь наш хвост.next = новый хвост.next
            // также переназначаем сам хвост
        // возвращает новый хвост


    // перечение множеств – возвращает новый хвост
    item* crosser(item* A, item* B);
        item* i = A.next; item* j = B.next;

        // заполняем первый элемент отдельно
            // пока !tail – идем по спискам
                // при совпадении itemов - tail добавляем
                // если в списке A элемент меньше – i.next
                // если в списке B элемент меньше – j.next

        while (i != A && j != B)
        {
            // при совпадении itemов - добавляем
                // создаем элемент и вставляем в хвост
                // j->next и i->next

            // если в текущем списке элемент меньше
                // i->next;

            // идем дальше по списку В
                // j->next;
        }
        // отдельно обрабатываем хвост – списком(который не закончился) догоняем другой
            // пока не закончился список А(В уже закончился)
                // при совпадении добавляем и выходим из цикла
                // если i > j (и j == B) – выходим, иначе next
                // если j > i (и i == A) – выхлдим, иначе next
        // возвращает новый хвост


    // разность – возвращает новый хвост
    item* subtractor(item* A, item* B);
        item* i = A->next; item* j = B.next;
        item* prev; // храним предыдущий элемент
        while (i != A && j != B)
        {
            // при совпадении itemов - удаляем i, по j идем дальше
                // j->next;
                // просто "вырезаем" элемент из списка А

            // если в текущем списке элемент меньше - делаем next, догоняем j
                // i->next;

            // идем дальше по списку В
                // j->next;
        }
        // отдельно обрабатываем хвост – списком(который не закончился) догоняем другой
            // при совпадении itemов - удаляем i, по j идем дальше
                // j->next;
                // просто "вырезаем" элемент из списка А
                // если это хвост A – возвращаем А

            // если в текущем списке элемент меньше - делаем next, догоняем j
                // i->next;
                // если i == A.next (снова дошли до головы) – break

            // идем дальше по списку В
                // j->next;
                // если j == B.next (снова дошли до головы) – break
        // возвращаем новый хвост


    // равны ли множества
    bool equals(Item* A, Item* B);
        // идем по спискам одновременно до хвоста первого списка
            // если не совпали – возвращаем false
        // выходим из цикла
        // и если хвосты не равны или j вообще не хвост (то есть множество больше) – возвращаем false
        // иначе возвращаем true


    // ищем от головы х, возвращаем всегда предыдущий
    item* findX(int x);
        // двигаемся по списку от головы пока не дошли до хвоста
              // если совпало или уже перепрыгнуло имеющееся значение – возвращаем prev
        // проверяем хвост
        // если ничего не нашли – возвращаем хвост


    // копирующий конструктор либо всего списка, либо его части
    // возвращает просто новый хвост
    // copy – голова, а не хвост
    item* copy(item* copy);
        // создаем хвост со значением copy
        // идем от copy.next до головы, создаем элементы и добавляем в хвост
        // возвращаем новый хвост

    void destructor();

public:
    // конструктор по умолчанию (пустое множество)
    ringlist_set();

    // UNION новое множество возвращает и записывается в С
    ringlist_set& operator+(ringlist_set& B);
        // если this == B – возвращаем this
        // если пустое множество this или В (возвращаем В и this соответственно)
        // если оба пустые – возвращаем пустое множество
        // создаем множество С и на нем вызываем combiner()
        // возвращаем С


    // INTERSECTION пересечение множеств this и В
    ringlist_set& operator^(ringlist_set& B);
        // если this == B – возвращаем this
        // если !this или !В ИЛИ если голова одного > хвоста другого (и наоборот) – возвращаем пустое множество
        // создаем множество С и на нем вызываем crosser()
        // возвращаем С


    // DIFFERENCE разность множеств this и В
    ringlist_set& operator/(ringlist_set& B);
        // если !this или this == B – возвращаем пустое множество
        // если !В – возвращаем this
        // если голова одного > хвоста другого (и наоборот) – возвращаем this
        // создаем множество С, отправляем в копирующий конструктор и на нем вызываем subtractor()
        // возвращаем С


    // слияние множеств А и В, результат в С. На непересекающихся множествах!!!!
    ringlist_set& merge(ringlist_set& B);
        // если пустое множество this или В (возвращаем В и this соответственно)
        // если оба пустые – возвращаем пустое множество
        // если пересекаются – выбрасываем исключение
        // иначе создаем множество С и на нем вызываем combiner()
        // возвращаем С


    // true - х принадлежит А, false - не принадлежит
    bool member(int x);
        // если !this – возвращаем false
        // с помощью метода findX получаем prev
        // return temp->next->val == x


    // вставить в множество значение
    void insert(int v);
        // создаем item с val = x
        // вставка в пустое множество - создается tail - первый и последний элемент
        // если x < head.val то вставка в голову
        // поиск значения x в методе findX получаем предыдущий элемент
        // вернули prev элемента neW.val - если prev.next это не х - то надо добавить


    // из множества А удаляется значение х, если оно там есть, иначе ничего не делаем
    void deleTe(int x);
        // если !this – return
        // prev – храним предыдущий элемент
        // двигаемся по списку this до х
        // ЕСЛИ НАШЛИ СОВПАДЕНИЕ
              // и это хвост
                    // если один элемент в списке – nullptr возвращаем
                    // иначе переназначаем хвост, возвращаем новый
              // иначе "вырезаем" элемент i из списка и возвращаем this
        // возвращаем this, если не нашли в целом х в списке


    // ASSIGN присваивание А мн-ва В. В не меняется
    ringlist_set& operator= (ringlist_set B);
        // если this == B – возвращаем this
        // иначе удаляем список this и отправляем в copy(B.tail)
        // return this


    // минимальный элемент списка - tail->next
    int min();
        // возвращаем tail.next


    // последний элемент списка - tail
    int max();
        // возвращаем tail


    //  EQUAL true, если множества A и B эквивалентны. false, если множества A и B  не эквивалентны.
    bool operator==(ringlist_set& B);
        // если this == B – возвращаем true
        // если нет какого-то из множеств – возвращаем false
        // возвращаем equals(this.tail,B.tail);


    // возвращает то множество, в котором обнаружен объект х. Если не найден, то возвращаем пустое множество - NULLPTR (ни А, ни В).
    ringlist_set& find(ringlist_set& B, int x);
        // если !this и В – ищем только в В (и наоборот)
        // ищем х в findX
            // если prev(который вернулся).next == x – возвращаем this
            // то же самое делаем с В
        // иначе возвращаем пустое множество


    // доп. метод - проверяет пересекаются множества или нет.
    bool isIntersect(const ringlist_set& A, const ringlist_set& B);
        // если В == this – возвращаем true
        // если промежутки у них разные – возвращаем false
        // идем по спискам одновременно с головы до первого встретившегося хвоста
            // если совпали – возвращаем true
            // если i > j – в j делаем next
            // если i < j – в i делаем next
        // разбираемся с хвостами и если что "догоняем" множество, которое дошло до хвоста